// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: log/v1/log.proto

package logv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "distributed-systems/gen/log/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LogAPIName is the fully-qualified name of the LogAPI service.
	LogAPIName = "log.v1.LogAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LogAPIProduceProcedure is the fully-qualified name of the LogAPI's Produce RPC.
	LogAPIProduceProcedure = "/log.v1.LogAPI/Produce"
	// LogAPIConsumeProcedure is the fully-qualified name of the LogAPI's Consume RPC.
	LogAPIConsumeProcedure = "/log.v1.LogAPI/Consume"
	// LogAPIConsumeStreamProcedure is the fully-qualified name of the LogAPI's ConsumeStream RPC.
	LogAPIConsumeStreamProcedure = "/log.v1.LogAPI/ConsumeStream"
	// LogAPIProduceStreamProcedure is the fully-qualified name of the LogAPI's ProduceStream RPC.
	LogAPIProduceStreamProcedure = "/log.v1.LogAPI/ProduceStream"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	logAPIServiceDescriptor             = v1.File_log_v1_log_proto.Services().ByName("LogAPI")
	logAPIProduceMethodDescriptor       = logAPIServiceDescriptor.Methods().ByName("Produce")
	logAPIConsumeMethodDescriptor       = logAPIServiceDescriptor.Methods().ByName("Consume")
	logAPIConsumeStreamMethodDescriptor = logAPIServiceDescriptor.Methods().ByName("ConsumeStream")
	logAPIProduceStreamMethodDescriptor = logAPIServiceDescriptor.Methods().ByName("ProduceStream")
)

// LogAPIClient is a client for the log.v1.LogAPI service.
type LogAPIClient interface {
	Produce(context.Context, *connect.Request[v1.ProduceRequest]) (*connect.Response[v1.ProduceResponse], error)
	Consume(context.Context, *connect.Request[v1.ConsumeRequest]) (*connect.Response[v1.ConsumeResponse], error)
	ConsumeStream(context.Context, *connect.Request[v1.ConsumeStreamRequest]) (*connect.ServerStreamForClient[v1.ConsumeStreamResponse], error)
	ProduceStream(context.Context) *connect.BidiStreamForClient[v1.ProduceStreamRequest, v1.ProduceStreamResponse]
}

// NewLogAPIClient constructs a client for the log.v1.LogAPI service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLogAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LogAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &logAPIClient{
		produce: connect.NewClient[v1.ProduceRequest, v1.ProduceResponse](
			httpClient,
			baseURL+LogAPIProduceProcedure,
			connect.WithSchema(logAPIProduceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		consume: connect.NewClient[v1.ConsumeRequest, v1.ConsumeResponse](
			httpClient,
			baseURL+LogAPIConsumeProcedure,
			connect.WithSchema(logAPIConsumeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		consumeStream: connect.NewClient[v1.ConsumeStreamRequest, v1.ConsumeStreamResponse](
			httpClient,
			baseURL+LogAPIConsumeStreamProcedure,
			connect.WithSchema(logAPIConsumeStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		produceStream: connect.NewClient[v1.ProduceStreamRequest, v1.ProduceStreamResponse](
			httpClient,
			baseURL+LogAPIProduceStreamProcedure,
			connect.WithSchema(logAPIProduceStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// logAPIClient implements LogAPIClient.
type logAPIClient struct {
	produce       *connect.Client[v1.ProduceRequest, v1.ProduceResponse]
	consume       *connect.Client[v1.ConsumeRequest, v1.ConsumeResponse]
	consumeStream *connect.Client[v1.ConsumeStreamRequest, v1.ConsumeStreamResponse]
	produceStream *connect.Client[v1.ProduceStreamRequest, v1.ProduceStreamResponse]
}

// Produce calls log.v1.LogAPI.Produce.
func (c *logAPIClient) Produce(ctx context.Context, req *connect.Request[v1.ProduceRequest]) (*connect.Response[v1.ProduceResponse], error) {
	return c.produce.CallUnary(ctx, req)
}

// Consume calls log.v1.LogAPI.Consume.
func (c *logAPIClient) Consume(ctx context.Context, req *connect.Request[v1.ConsumeRequest]) (*connect.Response[v1.ConsumeResponse], error) {
	return c.consume.CallUnary(ctx, req)
}

// ConsumeStream calls log.v1.LogAPI.ConsumeStream.
func (c *logAPIClient) ConsumeStream(ctx context.Context, req *connect.Request[v1.ConsumeStreamRequest]) (*connect.ServerStreamForClient[v1.ConsumeStreamResponse], error) {
	return c.consumeStream.CallServerStream(ctx, req)
}

// ProduceStream calls log.v1.LogAPI.ProduceStream.
func (c *logAPIClient) ProduceStream(ctx context.Context) *connect.BidiStreamForClient[v1.ProduceStreamRequest, v1.ProduceStreamResponse] {
	return c.produceStream.CallBidiStream(ctx)
}

// LogAPIHandler is an implementation of the log.v1.LogAPI service.
type LogAPIHandler interface {
	Produce(context.Context, *connect.Request[v1.ProduceRequest]) (*connect.Response[v1.ProduceResponse], error)
	Consume(context.Context, *connect.Request[v1.ConsumeRequest]) (*connect.Response[v1.ConsumeResponse], error)
	ConsumeStream(context.Context, *connect.Request[v1.ConsumeStreamRequest], *connect.ServerStream[v1.ConsumeStreamResponse]) error
	ProduceStream(context.Context, *connect.BidiStream[v1.ProduceStreamRequest, v1.ProduceStreamResponse]) error
}

// NewLogAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLogAPIHandler(svc LogAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	logAPIProduceHandler := connect.NewUnaryHandler(
		LogAPIProduceProcedure,
		svc.Produce,
		connect.WithSchema(logAPIProduceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	logAPIConsumeHandler := connect.NewUnaryHandler(
		LogAPIConsumeProcedure,
		svc.Consume,
		connect.WithSchema(logAPIConsumeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	logAPIConsumeStreamHandler := connect.NewServerStreamHandler(
		LogAPIConsumeStreamProcedure,
		svc.ConsumeStream,
		connect.WithSchema(logAPIConsumeStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	logAPIProduceStreamHandler := connect.NewBidiStreamHandler(
		LogAPIProduceStreamProcedure,
		svc.ProduceStream,
		connect.WithSchema(logAPIProduceStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/log.v1.LogAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LogAPIProduceProcedure:
			logAPIProduceHandler.ServeHTTP(w, r)
		case LogAPIConsumeProcedure:
			logAPIConsumeHandler.ServeHTTP(w, r)
		case LogAPIConsumeStreamProcedure:
			logAPIConsumeStreamHandler.ServeHTTP(w, r)
		case LogAPIProduceStreamProcedure:
			logAPIProduceStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLogAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedLogAPIHandler struct{}

func (UnimplementedLogAPIHandler) Produce(context.Context, *connect.Request[v1.ProduceRequest]) (*connect.Response[v1.ProduceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("log.v1.LogAPI.Produce is not implemented"))
}

func (UnimplementedLogAPIHandler) Consume(context.Context, *connect.Request[v1.ConsumeRequest]) (*connect.Response[v1.ConsumeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("log.v1.LogAPI.Consume is not implemented"))
}

func (UnimplementedLogAPIHandler) ConsumeStream(context.Context, *connect.Request[v1.ConsumeStreamRequest], *connect.ServerStream[v1.ConsumeStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("log.v1.LogAPI.ConsumeStream is not implemented"))
}

func (UnimplementedLogAPIHandler) ProduceStream(context.Context, *connect.BidiStream[v1.ProduceStreamRequest, v1.ProduceStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("log.v1.LogAPI.ProduceStream is not implemented"))
}
